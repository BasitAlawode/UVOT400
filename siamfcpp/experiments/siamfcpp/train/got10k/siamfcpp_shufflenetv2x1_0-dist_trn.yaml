test:
  track:
    exp_name: &TEST_NAME "siamfcpp_shufflenetv2x1_0-got-dist"
    exp_save: &TEST_SAVE "logs"
    model:
      backbone:
        name: "ShuffleNetV2_x1_0"
        ShuffleNetV2_x1_0:
          pretrain_model_path: ""
          crop_pad: 4
      losses:
        names: []
      task_head:
        name: "DenseboxHead"
        DenseboxHead:
          total_stride: 8
          score_size: 17
          x_size: 303
          num_conv3x3: 3
          head_conv_bn: [False, False, True]
      task_model:
        name: "SiamTrack"
        SiamTrack:
          pretrain_model_path: "snapshots/siamfcpp_shufflenetv2x1_0-got-dist/epoch-19.pkl"
    pipeline:
      name: "SiamFCppTracker"
      SiamFCppTracker:
        test_lr: 0.52
        window_influence: 0.21
        penalty_k: 0.04
        num_conv3x3: 3
    tester:
      names: ["GOT10kTester",]  # (VOTTester|GOT10kTester|LaSOTTester)
      VOTTester:
        exp_name: *TEST_NAME
        exp_save: *TEST_SAVE
        device_num: 1
        dataset_names: ["VOT2018"]
      GOT10kTester:
        exp_name: *TEST_NAME
        exp_save: *TEST_SAVE
        subsets: ["val", "test"]  # (val|test)
        device_num: 4
      LaSOTTester:
        exp_name: *TEST_NAME
        exp_save: *TEST_SAVE
        subsets: ["test"]  # (train_test|test)
train:
  track:
    exp_name: &TRAIN_NAME "siamfcpp_shufflenetv2x1_0-got-dist"
    exp_save: &TRAIN_SAVE "snapshots"
    num_processes: 4
    model:
      backbone:
        name: "ShuffleNetV2_x1_0"
        ShuffleNetV2_x1_0:
          pretrain_model_path: "models/shufflenet/shufflenetv2_x1-5666bf0f80-md5_e7d72ef106c3f9818928503bef96804b.pth"
          crop_pad: 4
      losses:
        names: ["SigmoidCrossEntropyRetina",
                "SigmoidCrossEntropyCenterness",
                "IOULoss",]
        SigmoidCrossEntropyRetina:
          name: "cls"
          weight: 1.0
          alpha: 0.5
          gamma: 2.0
        SigmoidCrossEntropyCenterness:
          name: "ctr"
          weight: 1.0
        IOULoss:
          name: "reg"
          weight: 3.0
      task_head:
        name: "DenseboxHead"
        DenseboxHead:
          total_stride: 8
          score_size: 17
          x_size: 303
          num_conv3x3: 3
          head_conv_bn: [False, False, True]
      task_model:
        name: "SiamTrack"
        SiamTrack:
          pretrain_model_path: ""
# ==================================================
    data:
      exp_name: *TRAIN_NAME
      exp_save: *TRAIN_SAVE
      num_epochs: &NUM_EPOCHS 20
      minibatch: &MINIBATCH 32
      num_workers: 32
      nr_image_per_epoch: &NR_IMAGE_PER_EPOCH 400000  
      pin_memory: false
      datapipeline:
        name: "RegularDatapipeline"
      sampler:
        name: "TrackPairSampler"
        TrackPairSampler:
          negative_pair_ratio: 0.2
        submodules:
          dataset:
            names: ["GOT10kDataset",]  # (GOT10kDataset|LaSOTDataset)
            GOT10kDataset: &GOT10KDATASET_CFG
              ratio: 1.0
              max_diff: 100
              dataset_root: "datasets/GOT-10k"
              subset: "train"
            GOT10kDatasetFixed: *GOT10KDATASET_CFG  # got10k dataset with exclusion of unfixed sequences
            LaSOTDataset:
              ratio: 1.0
              max_diff: 100
              dataset_root: "datasets/LaSOT"
              subset: "train"
          filter:
            name: "TrackPairFilter"
            TrackPairFilter:
              max_area_rate: 0.6
              min_area_rate: 0.001
              max_ratio: 10
      transformer:
        names: ["RandomCropTransformer", ]
        RandomCropTransformer:
          max_scale: 0.3
          max_shift: 0.4
          x_size: 303
      target:
        name: "DenseboxTarget"
        DenseboxTarget:
          total_stride: 8
          score_size: 17
          x_size: 303
          num_conv3x3: 3
    trainer:
      name: "DistributedRegularTrainer"
      DistributedRegularTrainer:
        exp_name: *TRAIN_NAME
        exp_save: *TRAIN_SAVE
        max_epoch: *NUM_EPOCHS
        minibatch: *MINIBATCH
        nr_image_per_epoch: *NR_IMAGE_PER_EPOCH
        snapshot: ""
      monitors:
        names: ["TextInfo"]  # "TensorboardLogger"
        TextInfo:
          {}
        TensorboardLogger:
          exp_name: *TRAIN_NAME
          exp_save: *TRAIN_SAVE

# ==================================================
    optim:
      optimizer:
        name: "SGD"
        SGD:
          # to adjust learning rate, please modify "start_lr" and "end_lr" in lr_policy module bellow
          momentum: 0.9
          weight_decay: 0.00005
          minibatch: *MINIBATCH
          nr_image_per_epoch: *NR_IMAGE_PER_EPOCH
          lr_policy:
          - >
            {
            "name": "LinearLR",
            "start_lr": 0.000001,
            "end_lr": 0.08,
            "max_epoch": 1
            }
          - >
            {
            "name": "CosineLR",
            "start_lr": 0.08,
            "end_lr": 0.000001,
            "max_epoch": 19
            }
          lr_multiplier:
          - >
            {
            "name": "backbone",
            "regex": "basemodel",
            "ratio": 0.1
            }
          - >
            {
            "name": "other",
            "regex": "^((?!basemodel).)*$",
            "ratio": 1
            }
      grad_modifier:
        name: "DynamicFreezer"
        DynamicFreezer:
          schedule:
          - >
            {
            "name": "isConv",
            "regex": "basemodel\\._model\\.(conv1\\.0|conv5\\.0|branch1\\.(0|2)|branch2\\.(0|3|5))",
            "epoch": 0,
            "freezed": true
            }
          - >
            {
            "name": "isConvStage4",
            "regex": "basemodel\\._model\\.stage4.*(conv1\\.0|conv5\\.0|branch1\\.(0|2)|branch2\\.(0|3|5))",
            "epoch": 5,
            "freezed": false
            }
          - >
            {
            "name": "isConvStage3",
            "regex": "basemodel\\._model\\.stage3.*(conv1\\.0|conv5\\.0|branch1\\.(0|2)|branch2\\.(0|3|5))",
            "epoch": 10,
            "freezed": false
            }
          - >
            {
            "name": "isConvStage2",
            "regex": "basemodel\\._model\\.stage2.*(conv1\\.0|conv5\\.0|branch1\\.(0|2)|branch2\\.(0|3|5))",
            "epoch": 15,
            "freezed": false
            }
